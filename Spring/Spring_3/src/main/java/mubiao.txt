spring常用注解
用于创建对象的
    @Component()
    作用:用于把当前类对象存放如spring核心容器中
    属性:value:指定bean的id,默认为当前类名首字母小写

    更加明确的语义化。
    @Controller：一般用于表现层的注解。
    @Service：一般用于业务层的注解。
    @Repository：一般用于持久层的注解。

 * 用于创建对象的
 *      他们的作用就和在XML配置文件中编写一个<bean>标签实现的功能是一样的
 *      Component:
 *          作用：用于把当前类对象存入spring容器中
 *          属性：
 *              value：用于指定bean的id。当我们不写时，它的默认值是当前类名，且首字母改小写。
 *      Controller：一般用在表现层
 *      Service：一般用在业务层
 *      Repository：一般用在持久层
 *      以上三个注解他们的作用和属性与Component是一模一样。
 *      他们三个是spring框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰
 *
 *
 * 用于注入数据的
 *      他们的作用就和在xml配置文件中的bean标签中写一个<property>标签的作用是一样的
 *      Autowired:
 *          作用：自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功
 *                如果ioc容器中没有任何bean的类型和要注入的变量类型匹配，则报错。
 *                如果Ioc容器中有多个类型匹配时：
 *          出现位置：
 *              可以是变量上，也可以是方法上
 *          细节：
 *              在使用注解注入时，set方法就不是必须的了。
 *      Qualifier:
 *          作用：在按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用。但是在给方法参数注入时可以（稍后我们讲）
 *          属性：
 *              value：用于指定注入bean的id。
 *      Resource
 *          作用：直接按照bean的id注入。它可以独立使用
 *          属性：
 *              name：用于指定bean的id。
 *      以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。
 *      另外，集合类型的注入只能通过XML来实现。
 *
 *      Value
 *          作用：用于注入基本类型和String类型的数据
 *          属性：
 *              value：用于指定数据的值。它可以使用spring中SpEL(也就是spring的el表达式）
 *                      SpEL的写法：${表达式}
 *
 * 用于改变作用范围的
 *      他们的作用就和在bean标签中使用scope属性实现的功能是一样的
 *      Scope
 *          作用：用于指定bean的作用范围
 *          属性：
 *              value：指定范围的取值。常用取值：singleton prototype
                singleton prototype request session globalsession
 *
 * 和生命周期相关 了解
 *      他们的作用就和在bean标签中使用init-method和destroy-methode的作用是一样的
 *      PreDestroy
 *          作用：用于指定销毁方法
 *      PostConstruct
 *          作用：用于指定初始化方法

案例使用xml的方式和注解的方式实现单表的CRUD;持久层Mybatis
----...
改造基于注解的ioc案例,使用纯注解的方式实现
@Configuration:表示当前类是一个配置类
    作用：
        用于指定当前类是一个 spring 配置类，当创建容器时会从该类上加载注解。获取容器时需要使用
        AnnotationApplicationContext(有@Configuration 注解的类.class)。
    属性：
        value:用于指定配置类的字节码
@ComponentScan
作用：
    用于指定 spring 在初始化容器时要扫描的包。作用和在 spring 的 xml 配置文件中的：
    <context:component-scan base-package="com.itheima"/>是一样的。
属性：
    basePackages：用于指定要扫描的包。和该注解中的 value 属性作用一样
@Bean
作用：
    该注解只能写在方法上，表明使用此方法创建一个对象，并且放入 spring 容器。
属性：
    name：给当前@Bean 注解方法创建的对象指定一个名称(即 bean 的 id）

@PropertySource
作用：
    用于加载.properties 文件中的配置。例如我们配置数据源时，可以把连接数据库的信息写到properties 配置文件中，就可以使用此注解指定 properties 配置文件的位置。
属性：
    value[]：用于指定 properties 文件位置。如果是在类路径下，需要写上 classpath:






spring和Junit整合